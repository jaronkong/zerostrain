<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>bloomablePar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

selfHealth = 100;
selfHealthMax = 100;

aimDir = 0;
aimPercent = 0;

frictionAmount = 0.25; //0.25
currentFriction = frictionAmount;

accel = 2;
currentAccel = accel;

maxSpeed = 5;
currentMaxSpeed = maxSpeed;

//Visual
currentFaceDir = 0;
targetFaceDir = 0;
faceDirTween = 0.2;

//Control
deadZone = 0.2;
inputMoveDir = 0;
inputMovePercent = 0; //How much of the accel to apply in a direction.
inputAimDir = 0;
inputAimPercent = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapons

equippedWeapon = noone;
weaponEquip( weapon_gun_con, other.id );


firing = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Local HUD

radius = 70;
arcRes = 3;
arcTween = 0.2;

healthAngleRange = 90;
healthStartAngle = 180;
healthAlertPercent = 0.25;
currentDrawHealth = 0;
healthColor = c_yellow;

weaponDurationRange = 180;
weaponDurationStartAngle = 0;
weaponDurationAlertPercent = 0.3;
currentDrawWeaponDuration = 0;
weaponDurationColor = c_orange;

hudFlashColor = c_red;
hudFlashOn = false;
hudFlashRate = 3;
hudFlashTimer = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get input

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
// Keyboard
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------

if ( !gamepad_is_connected( 0 ) ) {
    inputMovePercent = 0;
    inputAimPercent = 0;
    var tKeyboardInputAngleX = 0;
    var tKeyboardInputAngleY = 0;
    if ( keyboard_check( ord("A") ) ) {
        inputMovePercent = 1;
        tKeyboardInputAngleX -= 1;
    }
    if ( keyboard_check( ord("D") ) ) {
        inputMovePercent = 1;
        tKeyboardInputAngleX += 1;
    }
    if ( keyboard_check( ord("W") ) ) {
        inputMovePercent = 1;
        tKeyboardInputAngleY -= 1;
    }
    if ( keyboard_check( ord("S") ) ) {
        inputMovePercent = 1;
        tKeyboardInputAngleY += 1;
    }
    
    if ( mouse_check_button( mb_left )) {
        inputAimPercent = 1;
    }
    
    if ( tKeyboardInputAngleX != 0 || tKeyboardInputAngleY != 0 ) {
        inputMoveDir = point_direction( 0, 0, tKeyboardInputAngleX, tKeyboardInputAngleY );
    }
    inputAimDir = point_direction( x, y, mouse_x, mouse_y );
}

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
// Controller
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
if ( gamepad_is_connected( 0 ) ) {
    var tXInputValL = gamepad_axis_value( 0, gp_axislh );
    var tYInputValL = gamepad_axis_value( 0, gp_axislv );
    
    var tXInputValR = gamepad_axis_value( 0, gp_axisrh );
    var tYInputValR = gamepad_axis_value( 0, gp_axisrv );
    
    //--------------------------------------------------------------------------
    // Left Stick movement
    //--------------------------------------------------------------------------
    var tInputMagnitude = point_distance( 0, 0, tXInputValL, tYInputValL );
    if ( tInputMagnitude &gt; deadZone ) {
        inputMoveDir = point_direction( 0, 0, tXInputValL, tYInputValL );
    
        inputMovePercent = tInputMagnitude;
        inputMovePercent = clamp( inputMovePercent, 0, 1 );
        
    }
    else {
        inputMovePercent = 0;
    }
    
    //--------------------------------------------------------------------------
    // Right Stick aiming
    //--------------------------------------------------------------------------
    var tInputMagnitudeRight = point_distance( 0, 0, tXInputValR, tYInputValR );
    if ( tInputMagnitudeRight &gt; deadZone ) {
        inputAimDir = point_direction( 0, 0, tXInputValR, tYInputValR );
    
        inputAimPercent = tInputMagnitudeRight;
        inputAimPercent = clamp( inputAimPercent, 0, 1 );
        
    }
    else {
        inputAimPercent = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control ship movement

var t = global.timeTickFactor;

friction = frictionAmount*t;
motion_add( inputMoveDir, accel*inputMovePercent*t );
if ( speed &gt; currentMaxSpeed*inputMovePercent*t ) {
    speed = currentMaxSpeed*inputMovePercent*t;
}

aimDir = inputAimDir;

//Visual
targetFaceDir = inputMoveDir;
currentFaceDir += angle_difference( targetFaceDir, currentFaceDir ) * faceDirTween * t;
image_angle = currentFaceDir;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon control

if ( instance_exists( equippedWeapon ) ) {
    with ( equippedWeapon ) {
        firing = other.firing;
        aimDir = other.aimDir;
    }
}

if ( inputAimPercent &gt; 0 ) {
    firing = true;
}
else {
    firing = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HUD flashing and tweening

currentDrawHealth = lerp( currentDrawHealth, selfHealth, arcTween );
if ( instance_exists( equippedWeapon ) ) {
    currentDrawWeaponDuration = lerp( currentDrawWeaponDuration, equippedWeapon.duration, arcTween );
}

hudFlashTimer --;

if ( hudFlashTimer &lt;= 0 ) {
    hudFlashOn = !hudFlashOn;
    hudFlashTimer = hudFlashRate;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

//---------------------------------------------------
// HUD stuff
//---------------------------------------------------
draw_sprite_ext( playerHUDRing_spr, 0, x, y, 1, 1, 0, c_white, 0.7 );

//Health
var tHealthPercent = currentDrawHealth / selfHealthMax;
draw_set_color( healthColor );
if ( hudFlashOn &amp;&amp; tHealthPercent &lt;= healthAlertPercent ) {
    draw_set_color( hudFlashColor );
}
draw_set_alpha( 1 );
drawArc( healthAngleRange * tHealthPercent, arcRes, radius, healthStartAngle, x, y );

//Weapon Duration
if ( instance_exists( equippedWeapon ) ) {
    var tDurationPercent = currentDrawWeaponDuration/equippedWeapon.maxDuration;
    draw_set_color( weaponDurationColor );
    if ( hudFlashOn &amp;&amp; tDurationPercent &lt;= weaponDurationAlertPercent ) {
        draw_set_color( hudFlashColor );
    }
    draw_set_alpha( 1 );
    drawArc( weaponDurationRange * tDurationPercent, arcRes, radius, weaponDurationStartAngle, x, y );

}

//---------------------------------------------------
// Player image and tracers
//---------------------------------------------------

draw_self();

draw_set_color( c_white );
draw_set_alpha( 1 );

draw_line( x, y, x + lengthdir_x( 128, aimDir ), y + lengthdir_y( 128, aimDir ) );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

event_user( 0 );

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
