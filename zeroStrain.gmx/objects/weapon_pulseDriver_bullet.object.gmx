<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite13</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>weaponPar_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Specific properties

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Effects
var t = global.timeTickFactor;
part_emitter_region( system1, emitter1, x, x, y, y, ps_shape_ellipse, ps_distr_gaussian );

part_type_direction(getParticle( "pulseShotCore" ), direction + 180 - 20,direction + 180 + 20, 0 *t,0 *t);
part_type_direction(getParticle( "pulseShotTrail" ), direction + 180 - 45,direction + 180 + 45, 0 *t,0 *t);
part_type_direction(getParticle( "pulseShotLineTail" ), direction + 180,direction + 180, 0 *t,0 *t);

part_emitter_burst( system1, emitter1, getParticle( "pulseShotCore" ), 1 *t );
part_emitter_burst( system1, emitter1, getParticle( "pulseShotTrail" ), 3 *t );
part_emitter_burst( system1, emitter1, getParticle( "pulseShotLineTail" ), 2 *t );

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check collision

var tHitObj = weaponCheckForwardLineColl( id );
if ( tHitObj != noone ) {
    var tTargetDir = point_direction( x, y, tHitObj.x, tHitObj.y );
    var tTriggerBurst = false;
    
    forceApplyToEnemy( tHitObj, tTargetDir, hitForce );
    
    with ( tHitObj ) {
        if ( !instance_exists(pulseDriverAttachedIcon) ) {
            pulseDriverAttachedIcon = instance_create( 0, 0, pulseDriverStackIcon );
            with ( pulseDriverAttachedIcon ) {
                attachTarget = other.id;
                event_user( 1 );
            }
        }
        else {
            with ( pulseDriverAttachedIcon ) {
                if ( targetBaseAlpha &gt; 0 ) {
                    event_user( 1 );
                    if ( currentStacks &gt;= 3 ) {
                        event_user( 2 );
                        tTriggerBurst = true;
                    }
                }
            }
        }
    }
    if ( tTriggerBurst ) {
        with ( ownerController ) {
            
            playSound( pulseShatter_sd, 1, false );
            part_type_direction(getParticle( "pulseShotHitCore" ), tTargetDir,tTargetDir, 0 *t,0 *t);
            part_type_direction(getParticle( "pulseShotHitSplash" ), 0 ,359, 0 *t,0 *t);
            repeat( 50 * tHitObj.sizeFactor ) {
                bodyMaps_spawnParticle( tHitObj.bodyMapNum, tHitObj, tHitObj.image_angle, system1, getParticle( "pulseShotVaporize" ) );
                bodyMaps_spawnParticle( tHitObj.bodyMapNum, tHitObj, tHitObj.image_angle, system1, getParticle( "pulseShotHitSplash" ) );
                bodyMaps_spawnParticle( tHitObj.bodyMapNum, tHitObj, tHitObj.image_angle, system1, getParticle( "pulseShotHitCore" ) );
            }
            if ( instance_exists( tHitObj ) ) {
                weaponDoDamageRaw( tHitObj, ceil(damage * burstMultiplier + min( tHitObj.selfHealth*burstPercent, maxDamage )) );
            }
            shakeScreen( 32 );
            doStepSlow( 30, 2 );
        }
    }
    
    part_type_direction(getParticle( "pulseShotHitCore" ), tTargetDir + 180 - 10,tTargetDir + 180 + 10, 0 *t,0 *t);
    part_type_direction(getParticle( "pulseShotHitSplash" ), tTargetDir + 180 - 50,tTargetDir + 180 + 50, 0 *t,0 *t);

    part_emitter_burst( system1, emitter1, getParticle( "pulseShotHitCore" ), 15 *t );
    part_emitter_burst( system1, emitter1, getParticle( "pulseShotHitSplash" ), 50 *t );
    
    audioSetPitchRand( pulseHit_sd );
    playSound( pulseHit_sd, 1, false );
    shakeScreen( 8 );
    
    event_user( WEAPON_PROJ_EV.HIT );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
