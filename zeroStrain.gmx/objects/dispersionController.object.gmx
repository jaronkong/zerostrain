<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-101</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

showMap = true;
targetShader = dispersion_sdr;

resolution = 1;
prepSurface = -1;
stageSurface = -1;

distortMap = distortMap_spr;
decayFactor = 0.7; //0.9

drawQueue = ds_queue_create();

//uScale = shader_get_uniform(targetShader, "uScale");
s_decay = shader_get_uniform(targetShader, "decay");

//s_rawColorMap = shader_get_sampler_index(targetShader, "rawColorMap");
s_normalMap = shader_get_sampler_index(targetShader, "normalMap");
s_normalUVs = shader_get_uniform( targetShader, "uvs_normal" );

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Testing

posX = 0;
rate = 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up

//ds_priority_destroy( drawQueue );


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw on Prep

if ( surface_exists( prepSurface ) ) {
    surface_set_target( prepSurface );
    //d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );
    d3d_set_projection_ortho( 0, 0, room_width, room_height, view_angle[0] );
        draw_set_color( c_lime );
        draw_set_alpha( 1 );
        //draw_circle( mouse_x, 
        //            mouse_y, 32, false );
        //draw_circle( mouse_x / room_width * view_wview, 
        //            mouse_y / room_height * view_hview, 32, false );
    
    
    while ( !ds_queue_empty( drawQueue ) ) {
        var tCurrentObj = ds_queue_dequeue( drawQueue );

        with ( tCurrentObj ) {
            event_user( 0 );
        }
        
    }
    
    surface_reset_target();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if ( !surface_exists( prepSurface ) ) {
    prepSurface = surface_create( view_wview, view_hview );
    surface_set_target( prepSurface );
        draw_clear_alpha( c_black, 1 );
    surface_reset_target();
}
if ( !surface_exists( stageSurface ) ) {
    stageSurface = surface_create( view_wview, view_hview );
    surface_set_target( stageSurface );
        draw_clear_alpha( c_black, 1 );
    surface_reset_target();
}

// bind shader.
//draw_set_blend_mode( bm_add );
    shader_set(targetShader);
        texture_set_stage(s_normalMap, sprite_get_texture( distortMap, 0 ));
        var uvs = sprite_get_uvs( distortMap_spr, 0 );
        
        //shader_set_uniform_f( s_normalUVs, uvs[0], uvs[1], uvs[2], uvs[3]);
        
        var tUVWidth = uvs[2] - uvs[0];
        var tUVHeight = uvs[3] - uvs[1];
        var tViewXPercent = view_xview / room_width;
        var tViewYPercent = view_yview / room_height;
        var tViewWPercent = view_wview / room_width;
        var tViewHPercent = view_hview / room_height;
        
        shader_set_uniform_f( s_normalUVs, uvs[0] + tUVWidth*tViewXPercent, uvs[1] + tUVHeight*tViewYPercent, 
                                            uvs[0] + tUVWidth*tViewXPercent + tUVWidth*tViewWPercent, 
                                            uvs[1] + tUVHeight*tViewYPercent + tUVHeight*tViewHPercent);
        
        surface_set_target( stageSurface );
            shader_set_uniform_f( s_decay, decayFactor );
            
            draw_surface_stretched(prepSurface, 0, 0, 
                        view_wview, 
                        view_hview);
            
        surface_reset_target();

    shader_reset();
draw_set_blend_mode( bm_add );
/*
    draw_surface_stretched(stageSurface, view_xview, view_yview, 
                    view_wview, 
                    view_hview);
*/
    draw_surface_stretched(stageSurface, 0, 0, 
                    room_width, 
                    room_height);
                    
draw_set_blend_mode( bm_normal );                                   
    surface_copy( prepSurface, 0, 0, stageSurface ); //Copy the stage back to the prep


//draw_set_blend_mode( bm_normal );

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
/*
if ( global.debugMode &amp;&amp; showMap) {
    if ( surface_exists( effects_getShaderSurface() ) ) {
        draw_surface_stretched( effects_getShaderSurface(), view_xview + 0, view_yview + 200, 300, 250 );
    }
}
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
