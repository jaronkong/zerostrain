<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause the game

pause = background_create_from_surface(
    application_surface, 0, 0,
    surface_get_width( application_surface ),
    surface_get_height( application_surface ),
    false, false
);
deactivateAllInstances( true );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define genomes

label = "player";

geneBase = false;

geneOption = false;
geneOptionCount = 0;

length = 0;

geneResult = false;
resultLength = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define base strand

base[0] = noone;
base[1] = noone;

baseEffects = -1;
baseDesc = -1
baseInfo = false;
baseInfoCount = 0;

//Move here if no input
baseNeutralX = -0.2;
baseNeutralY = 0.5

//Current state
basePos = instance_create( 0, 0, mergeMenuInput );
baseX = 0;
baseY = 0;

baseTwist = 5;
baseSplit = -16;
baseInfoScale = 1;
baseInfoAlpha = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define option strands

optionCount = geneOptionCount;
optionCurrent = 0;

option = false;

optionDesc = false;
optionInfo = false;
optionInfoCount = false;

optionPos = instance_create( 0, 0, mergeMenuInput );
with ( optionPos ) {
    inHorizontal = gp_axisrh;
    inVertical = gp_axisrv;
    inUp = vk_up;
    inDown = vk_down;
    inLeft = vk_left;
    inRight = vk_right;
    inFlipH = true;
}
optionX = 0;
optionY = 0;

optionTwist = -baseTwist;
optionSplit = baseSplit;
optionCurrentAni = optionCurrent;
optionInfoScale = false;
optionInfoAlpha = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define state

stateMerging = false;

stateMergeComplete = false;

mergeRemoval = 0;
mergeRemovalSpeed = 0;

mergeOptionRemove = 0;
mergeCombine = 0;
mergeCombineThreshold = 0.6;
mergeTwist = 0;
mergeSplit = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define result strand

resultDesc = -1;
resultInfo = false;
resultInfoCount = 0;

resultInfoScale = 1;
resultInfoAlpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear base strand objects

for ( var i = 0; i &lt; 2; ++i ) {
    with ( base[i] ) instance_destroy( );
}

for ( var i = 0; i &lt; baseInfoCount; ++i ) {
    with ( baseInfo[i] ) instance_destroy( );
}
if ( ds_exists( baseDesc, ds_type_grid ) ) ds_grid_destroy( baseDesc );
if ( ds_exists( baseEffects, ds_type_map ) ) ds_map_destroy( baseEffects );

with ( basePos ) instance_destroy( );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear option strand objects

for ( var i = 0; i &lt; optionCount; ++i ) {
    for ( var j = 0; j &lt; 2; ++j ) {
        with ( option[i, j] ) instance_destroy( );
    }
    
    for ( var j = 0; j &lt; optionInfoCount[i]; ++j ) {
        with ( optionInfo[i, j] ) instance_destroy( );
    }
    if ( ds_exists( optionDesc[i], ds_type_grid ) ) ds_grid_destroy( optionDesc[i] );
}

with ( optionPos ) instance_destroy( );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy result strand objects

for ( var i = 0; i &lt; resultInfoCount; ++i ) {
    with ( resultInfo[i] ) instance_destroy( );
}

if ( ds_exists( resultDesc, ds_type_grid ) ) ds_grid_destroy( resultDesc );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy background image

background_delete( pause );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade info in and out

var t = global.timeTickFactor;

var tSpdIn = 0.05;
var tSpdOut = 0.1;

if ( basePos.x &gt; 0.3 ) {
    baseInfoAlpha = lerpDT( baseInfoAlpha, 0, tSpdOut, t );
} else {
    baseInfoAlpha = lerpDT( baseInfoAlpha, 1, tSpdIn, t );
}

if ( optionPos.x &gt; 0.3 ) {
    optionInfoAlpha = lerpDT( optionInfoAlpha, 0, tSpdOut, t );
} else {
    optionInfoAlpha = lerpDT( optionInfoAlpha, 1, tSpdIn, t );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cycle option strands

optionCurrentAni = lerpDT( optionCurrentAni, optionCurrent, 0.05, global.timeTickFactor );

if ( !optionPos.stateLocked ) {
    if ( abs( optionCurrentAni - optionCurrent ) &lt; 0.25 ) {
        if ( keyboard_check( optionPos.inUp ) ) {
            optionCurrent -= 1;
        }
        if ( keyboard_check( optionPos.inDown ) ) {
            optionCurrent += 1;
        }
        if ( gamepad_is_connected( 0 ) ) {
            var tAxis = gamepad_axis_value( 0, optionPos.inVertical );
            if ( tAxis &lt; -0.875 ) optionCurrent -= 1;
            if ( tAxis &gt; 0.875 ) optionCurrent += 1;
        }
        optionCurrent = clamp( optionCurrent, 0, ( optionCount - 1 ) );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trigger merge animation

if ( !stateMerging ) {
    if ( ( basePos.x &gt; 0.75 ) &amp;&amp; ( optionPos.x &gt; 0.75 ) ) {
        stateMerging = true;
        //Create merged gene
        geneResult = geneMergeStrands( label,
            geneBase, geneOption[optionCurrent], length
        );
        resultLength = array_length_1d( geneResult );
        //Orient strands
        basePos.stateLocked = true;
        while ( basePos.ry &lt; 0 ) basePos.ry += 360;
        while ( basePos.ry &gt;= 0 ) basePos.ry -= 360;
        optionPos.stateLocked = true;
        while ( optionPos.ry &lt; 0 ) optionPos.ry += 360;
        while ( optionPos.ry &gt;= 0 ) optionPos.ry -= 360;
    }
} else {
    var t = global.timeTickFactor;
    //Move to center
    var tSpd = 0.025;
    var tSpdR = 0.02;
    basePos.x = lerpDT( basePos.x, 0.8, tSpd, t );
    basePos.y = lerpDT( basePos.y, 0, tSpd, t );
    basePos.rx = lerpDT( basePos.rx, 0, tSpdR, t );
    basePos.ry = lerpDT( basePos.ry, 0, tSpdR, t );
    basePos.rz = lerpDT( basePos.rz, 0, tSpdR, t );
    optionPos.x = lerpDT( optionPos.x, 0.8, tSpd, t );
    optionPos.y = lerpDT( optionPos.y, 0, tSpd, t );
    optionPos.rx = lerpDT( optionPos.rx, 0, tSpdR, t );
    optionPos.ry = lerpDT( optionPos.ry, 0, tSpdR, t );
    optionPos.rz = lerpDT( optionPos.rz, 0, tSpdR, t );
    //Remove unchosen option strands
    mergeOptionRemove = lerpDT( mergeOptionRemove, 0.75, 0.02, t );
    //Unroll strands
    baseTwist = lerpDT( baseTwist, 0, 0.02, t );
    if ( ( baseTwist &lt; 5 ) &amp;&amp; ( basePos.ry &gt; -180 ) ) {
        baseSplit += ( 1.25 * t );
    }
    //Remove unused halves
    if ( baseSplit &gt; length ) {
        mergeRemovalSpeed += ( 0.0025 * t );
        mergeRemoval += ( mergeRemovalSpeed * t );
        //mergeRemoval = lerpDT( mergeRemoval, 4, 0.01, t );
        mergeCombine = lerpDT( mergeCombine, 1, 0.075, t );
    }
    if ( mergeCombine &lt; mergeCombineThreshold ) {
        mergeTwist = baseTwist;
        mergeSplit = baseSplit;
    } else {
        //Combine the final two strands
        if ( mergeSplit &gt; -48 ) {
            var mergeSplitLast = floor( mergeSplit );
            mergeSplit -= ( 1.0 * t );
            if ( ( mergeSplitLast &lt; resultLength ) &amp;&amp; ( mergeSplitLast &gt;= 0 ) ) {
                if ( floor( mergeSplit ) != mergeSplitLast ) {
                    var tColors = geneGetGenomeColors( label, geneResult, resultLength );
                    var tLeft = tColors[0];
                    var tRight = tColors[1];
                    var tBase = base[1];
                    var tOption = option[optionCurrent, 0];
                    tBase.colors[mergeSplitLast] = tLeft[mergeSplitLast];
                    tOption.colors[mergeSplitLast] = tRight[mergeSplitLast];
                    tBase.colorRefresh = true;
                    tOption.colorRefresh = true;
                }
            }
        }
        mergeTwist = lerpDT( mergeTwist, 5, 0.005, t );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for merge completion

if ( !stateMergeComplete &amp;&amp; stateMerging ) {
    if ( ( mergeSplit &lt; -40 ) &amp;&amp; ( mergeCombine &gt; mergeCombineThreshold ) ) {
        stateMergeComplete = true;
        //Create result descriptions
        var tEffects = geneComputeEffects( label, geneResult, resultLength );
        resultDesc = geneDescribeEffects( label, tEffects, baseEffects );
        ds_map_destroy( tEffects );
        //Create result info boxes
        resultInfoCount = ds_grid_height( resultDesc );
        for ( var i = 0; i &lt; resultInfoCount; ++i ) {
            resultInfo[i] = instance_create( x, y, geneDescriptionBox );
            with ( resultInfo[i] ) {
                data = other.resultDesc;
                index = i;
                visible = false;
            }
        }
    }
} else if ( stateMergeComplete ) {
    var t = global.timeTickFactor;
    resultInfoAlpha = lerpDT( resultInfoAlpha, 1, 0.05, t );
    if ( resultInfoAlpha &gt; 0.875 ) {
        //Check for menu exit
        var tExit = false;
        if ( keyboard_check_pressed( vk_space ) ) {
            tExit = true;
        }
        if ( gamepad_is_connected( 0 ) ) {
            if ( gamepad_button_check_pressed( 0, gp_shoulderrb ) ) {
                tExit = true;
            }
        }
        if ( tExit ) {
            event_user( 1 );
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpause the game

instance_activate_all( );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply gene effects

if ( stateMergeComplete ) {
    with ( playerGenetics ) {
        genome = other.geneResult;
        length = other.resultLength;
        event_user( 1 );
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize base strand

var tColors = geneGetGenomeColors( label, geneBase, length );
for ( var i = 0; i &lt; 2; ++i ) {
    base[i] = instance_create( x, y, dnaRender );
    base[i].segments = other.length;
    base[i].colors = tColors[i];
    base[i].visible = false;
}
base[1].mirror = true;

baseEffects = geneComputeEffects( label, geneBase, length );
baseDesc = geneDescribeEffects( label, baseEffects );

baseInfoCount = ds_grid_height( baseDesc );
for ( var i = 0; i &lt; baseInfoCount; ++i ) {
    baseInfo[i] = instance_create( x, y, geneDescriptionBox );
    with ( baseInfo[i] ) {
        data = other.baseDesc;
        index = i;
        visible = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize option strands

optionCount = geneOptionCount;
for ( var i = 0; i &lt; optionCount; ++i ) {
    var tColors = geneGetGenomeColors( label, geneOption[i], length );
    for ( var j = 0; j &lt; 2; ++j ) {
        option[i, j] = instance_create( x, y, dnaRender );
        option[i, j].segments = other.length;
        option[i, j].colors = tColors[j];
        option[i, j].visible = false;
    }
    option[i, 1].mirror = true;
    
    var tEffects = geneComputeEffects( label, geneOption[i], length );
    optionDesc[i] = geneDescribeEffects( label, tEffects, baseEffects );
    ds_map_destroy( tEffects );
    
    optionInfoCount[i] = ds_grid_height( optionDesc[i] );
    for ( var j = 0; j &lt; optionInfoCount[i]; ++j ) {
        optionInfo[i, j] = instance_create( x, y, geneDescriptionBox );
        with ( optionInfo[i, j] ) {
            data = other.optionDesc[i];
            index = j;
            mirror = true;
            visible = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="76">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update base strand positions

baseX = ( display_get_gui_width( ) * lerp( -0.1, 0.5, basePos.x ) );
baseY = ( display_get_gui_height( ) * lerp( 0.5, 0.6, basePos.y ) );

for ( var i = 0; i &lt; 2; ++i ) {
    base[i].x = baseX;
    base[i].y = baseY;
    base[i].z = basePos.z;
    base[i].rx = basePos.rx;
    base[i].ry = basePos.ry;
    base[i].rz = basePos.rz;
    base[i].twist = baseTwist;
    base[i].split = baseSplit;
}

var tHeight = 0;
for ( var i = 0; i &lt; baseInfoCount; ++i ) {
    if ( i &gt; 0 ) tHeight += 16;
    tHeight += baseInfo[i].height;
}
var tHeightOff = ( ( length * 6 ) - tHeight );
if ( tHeightOff &gt; 0 ) {
    tHeight += tHeightOff;
    tHeightOff /= baseInfoCount;
    for ( var i = 0; i &lt; baseInfoCount; ++i ) {
        baseInfo[i].height += tHeightOff;
    }
}
var py = -( tHeight / 2 );
for ( var i = 0; i &lt; baseInfoCount; ++i ) {
    baseInfo[i].x = 0;
    baseInfo[i].y = py;
    baseInfo[i].image_alpha = other.baseInfoAlpha;
    py += ( baseInfo[i].height + 16 );
}
baseInfoScale = ( length * 9.5 / tHeight );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update option strand positions

optionX = ( display_get_gui_width( ) * lerp( 1.1, 0.5, optionPos.x ) );
optionY = ( display_get_gui_height( ) * lerp( 0.5, 0.6, optionPos.y ) );

for ( var i = 0; i &lt; optionCount; ++i ) {
    var tDist = ( i - optionCurrentAni );
    var tDistAbs = abs( tDist );
    
    var tX = lerp( optionX, ( display_get_gui_width( ) * 2 ), ( 2 * tDistAbs / optionCount ) );
    var tY = ( optionY + ( tDist * 1500 ) );
    var tZ = ( optionPos.z + ( tDistAbs * 1000 ) );
    var tRX = ( optionPos.rx / ( tDistAbs + 1 ) );
    var tRY = -optionPos.ry;
    var tRZ = ( optionPos.rz / ( tDistAbs + 1 ) );
    
    for ( var j = 0; j &lt; 2; ++j ) {
        option[i, j].x = tX;
        option[i, j].y = tY;
        option[i, j].z = tZ;
        option[i, j].rx = tRX;
        option[i, j].ry = tRY;
        option[i, j].rz = tRZ;
        option[i, j].twist = optionTwist;
        option[i, j].split = optionSplit;
        if ( i == optionCurrent ) {
            option[i, j].twist = -baseTwist;
            option[i, j].split = baseSplit;
        }
    }
    
    var tHeight = 0;
    for ( var j = 0; j &lt; optionInfoCount[i]; ++j ) {
        if ( j &gt; 0 ) tHeight += 16;
        tHeight += optionInfo[i, j].height;
    }
    var tHeightOff = ( ( length * 6 ) - tHeight );
    if ( tHeightOff &gt; 0 ) {
        tHeight += tHeightOff;
        tHeightOff /= optionInfoCount[i];
        for ( var j = 0; j &lt; optionInfoCount[i]; ++j ) {
            optionInfo[i, j].height += tHeightOff;
        }
    }
    var py = -( tHeight / 2 );
    for ( var j = 0; j &lt; optionInfoCount[i]; ++j ) {
        optionInfo[i, j].x = -optionInfo[i, j].width;
        optionInfo[i, j].y = py;
        optionInfo[i, j].image_alpha = ( other.optionInfoAlpha * max( ( 1 - tDistAbs ), 0 ) );
        py += ( optionInfo[i, j].height + 16 );
    }
    optionInfoScale[i] = ( length * 9.5 / tHeight );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update result info position

if ( resultInfoCount &gt; 0 ) {
    var tHeight = 0;
    for ( var i = 0; i &lt; resultInfoCount; ++i ) {
        if ( i &gt; 0 ) tHeight += 16;
        tHeight += resultInfo[i].height;
    }
    var tHeightOff = ( ( length * 6 ) - tHeight );
    if ( tHeightOff &gt; 0 ) {
        tHeight += tHeightOff;
        tHeightOff /= resultInfoCount;
        for ( var i = 0; i &lt; resultInfoCount; ++i ) {
            resultInfo[i].height += tHeightOff;
        }
    }
    var py = -( tHeight / 2 );
    for ( var i = 0; i &lt; resultInfoCount; ++i ) {
        resultInfo[i].x = 0;
        resultInfo[i].y = py;
        resultInfo[i].image_alpha = other.resultInfoAlpha;
        py += ( resultInfo[i].height + 16 );
    }
    resultInfoScale = ( resultLength * 9.5 / tHeight );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply merge translations

if ( stateMerging ) {
    //Remove unused options
    var tOptionRemove = ( mergeOptionRemove * display_get_gui_width( ) );
    for ( var i = 0; i &lt; optionCount; ++i ) {
        if ( i == optionCurrent ) continue;
        for ( var j = 0; j &lt; 2; ++j ) {
            option[i, j].x += tOptionRemove;
        }
    }
    var tBase = base[1];
    var tOption = option[optionCurrent, 0];
    //Remove unsed elements
    var tY = ( mergeRemoval * display_get_gui_height( ) );
    base[0].y -= tY;
    option[optionCurrent, 1].y += tY;
    //Push elementes together
    var tCenter = ( display_get_gui_width( ) / 2 );
    tBase.x = lerp( tBase.x, tCenter, mergeCombine );
    tOption.x = lerp( tOption.x, tCenter, mergeCombine );
    //Wind strands together
    if ( mergeCombine &gt; mergeCombineThreshold ) {
        tBase.twist = mergeTwist;
        tBase.split = mergeSplit;
        tOption.twist = mergeTwist;
        tOption.split = mergeSplit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DNA strand setup

with ( base[0] ) event_perform( ev_draw, false );
with ( base[1] ) event_perform( ev_draw, false );

for ( var i = 0; i &lt; optionCount; ++i ) {
    with ( option[i, 0] ) event_perform( ev_draw, false );
    with ( option[i, 1] ) event_perform( ev_draw, false );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw paused background

draw_background_stretched( pause, 0, 0,
    display_get_gui_width( ), display_get_gui_height( )
);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Darken the screen

draw_set_color( c_dkgray );
draw_set_alpha( 1 );
draw_set_blend_mode_ext( bm_dest_color, bm_zero );

draw_rectangle( 0, 0, display_get_gui_width( ), display_get_gui_height( ), false );

draw_set_color( c_white );
draw_set_alpha( 1 );
draw_set_blend_mode( bm_normal );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable 3D

var tw = display_get_gui_width( );
var th = display_get_gui_height( );

d3d_start( );
d3d_set_projection_perspective( 0, th, tw, -th, 0 );
d3d_light_define_ambient( c_white );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw DNA strands

with ( base[0] ) event_perform( ev_draw, false );
with ( base[1] ) event_perform( ev_draw, false );

for ( var i = 0; i &lt; optionCount; ++i ) {
    with ( option[i, 0] ) event_perform( ev_draw, false );
    with ( option[i, 1] ) event_perform( ev_draw, false );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw info boxes

d3d_transform_stack_push( );

d3d_set_hidden( false );
d3d_set_depth( -10 );

//Base strand info
var tScale = baseInfoScale;
d3d_transform_add_scaling( tScale, tScale, tScale );
d3d_transform_add_rotation_y( 5 );
d3d_transform_add_rotation_z( base[0].rz );
d3d_transform_add_rotation_x( base[0].rx );
d3d_transform_add_translation( base[0].x, base[0].y, base[0].z );
d3d_transform_add_translation( ( base[0].radius * 17 ), 0, 0 );
for ( var i = 0; i &lt; baseInfoCount; ++i ) {
    with ( baseInfo[i] ) event_perform( ev_draw, false );
}

//Option strand info
for ( var i = 0; i &lt; optionCount; ++i ) {
    tScale = optionInfoScale[i];
    d3d_transform_stack_top( );
    d3d_transform_add_scaling( tScale, tScale, tScale );
    d3d_transform_add_rotation_y( -5 );
    d3d_transform_add_rotation_z( option[i, 0].rz );
    d3d_transform_add_rotation_x( option[i, 0].rx );
    d3d_transform_add_translation( option[i, 0].x, option[i, 0].y, option[i, 0].z );
    d3d_transform_add_translation( -( option[i, 0].radius * 17 ), 0, 0 );
    for ( var j = 0; j &lt; optionInfoCount[i]; ++j ) {
        with ( optionInfo[i, j] ) event_perform( ev_draw, false );
    }
}

//Result strand info
tScale = resultInfoScale;
d3d_transform_stack_top( );
d3d_transform_add_scaling( tScale, tScale, tScale );
d3d_transform_add_rotation_y( 5 );
d3d_transform_add_rotation_z( base[1].rz );
d3d_transform_add_rotation_x( base[1].rx );
d3d_transform_add_translation( base[1].x, base[1].y, base[1].z );
d3d_transform_add_translation( ( base[1].radius * 17 ), 0, 0 );
for ( var i = 0; i &lt; resultInfoCount; ++i ) {
    with ( resultInfo[i] ) event_perform( ev_draw, false );
}

d3d_transform_stack_pop( );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable 3D

var tw = display_get_gui_width( );
var th = display_get_gui_height( );

d3d_set_projection_ortho( 0, 0, tw, th, 0 );
d3d_end( );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
