<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite13</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemyWeaponPar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Specific properties

system1 = part_system_create();
part_system_depth( system1, PARTICLE_DEPTH );

emitter1 = part_emitter_create( system1 );
part_emitter_region( system1, emitter1, x, x, y, y, ps_shape_ellipse, ps_distr_gaussian );

bloom_attachParticleSystem( system1, BLOOM_DEPTH );
distortionGlow_attachParticleSystem( system1 );
refraction_attachParticleSystem( system1 );
dispersion_attachParticleSystem( system1 );

part_system_automatic_draw( system1, true );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Effects
var t = global.timeTickFactor;
part_emitter_region( system1, emitter1, x, x, y, y, ps_shape_ellipse, ps_distr_gaussian );

part_type_direction(getParticle( "enemyShotCore" ), direction + 180,direction + 180, 0 *t,0 *t);
part_type_direction(getParticle( "enemyShotTrail" ), direction + 180,direction + 180, 0 *t,0 *t);

part_emitter_burst( system1, emitter1, getParticle( "enemyShotCore" ), 1 *t );
part_emitter_burst( system1, emitter1, getParticle( "enemyShotTrail" ), 2 *t );


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check collision

var tHitObj = weaponCheckForwardLineAny( id, playerShip );
if ( tHitObj != noone ) {
    var tTargetDir = point_direction( x, y, tHitObj.x, tHitObj.y );
    
    with ( tHitObj ) {
        motion_add( tTargetDir, other.hitForce );
        damagePlayer( id, other.damage );
    }
    
    part_type_direction(getParticle( "enemyShotSparks" ), tTargetDir + 180 - 30,tTargetDir + 180 + 30, 0 *t,0 *t);
    part_type_direction(getParticle( "enemyShotHit" ), tTargetDir + 180 - 10,tTargetDir + 180 + 10, 0 *t,0 *t);

    part_emitter_burst( system1, emitter1, getParticle( "enemyShotSparks" ), 50 *t );
    part_emitter_burst( system1, emitter1, getParticle( "enemyShotHit" ), 10 *t );
    
    audioSetPitchRand( damageTaken_sd );
    playSound( damageTaken_sd, 1, false );
    shakeScreen( 15 );

    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
