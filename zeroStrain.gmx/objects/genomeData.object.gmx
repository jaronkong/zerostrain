<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define data set

file = "player";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define gene data to load

enum Gene {
    Tag,
    Default,
    Title,
    Hidden,
    Size
}

geneData = ds_grid_create( Gene.Size, 0 );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define group data to load

enum GeneGroup {
    Title,
    Value, Color,
    Items,
    Size
}

groupData = ds_grid_create( GeneGroup.Size, 0 );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define allele data to load

enum GeneAllele {
    Tag,
    Values,
    Quality,
    Group,
    Size
}

alleleData = ds_grid_create( GeneAllele.Size, 0 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the grids

ds_grid_destroy( geneData );

for ( var i = 0; i &lt; ds_grid_height( groupData ); ++i ) {
    ds_list_destroy( ds_grid_get( groupData, GeneGroup.Items, i ) );
}
ds_grid_destroy( groupData );

for ( var i = 0; i &lt; ds_grid_height( alleleData ); ++i ) {
    ds_map_destroy( ds_grid_get( alleleData, GeneAllele.Values, i ) );
}
ds_grid_destroy( alleleData );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load data

ini_open( working_directory + "\data\genome\" + file + ".dat" );

var tQueue = ds_queue_create( );
ds_queue_enqueue( tQueue, "groups" );

var tGroup = -1;

while ( !ds_queue_empty( tQueue ) ) {
    var tSection = ds_queue_dequeue( tQueue );
    //Process group
    if ( ini_key_exists( tSection, "title" ) ) {
        var tGroupTitle = ini_read_string( tSection, "title", "" );
        var tGroupValue = ini_read_string( tSection, "value", "" );
        var tGroupColor = ini_read_string( tSection, "color", "$FFFFFF" );
        var tIndex = ds_grid_height( groupData );
        ds_grid_resize( groupData, GeneGroup.Size, ( tIndex + 1 ) );
        ds_grid_set( groupData, GeneGroup.Title, tIndex, tGroupTitle );
        ds_grid_set( groupData, GeneGroup.Value, tIndex, tGroupValue );
        ds_grid_set( groupData, GeneGroup.Color, tIndex, parseColor( tGroupColor ) );
        ds_grid_set( groupData, GeneGroup.Items, tIndex, ds_list_create( ) );
        tGroup = tIndex;
    }
    //Process children
    var tCount = ini_read_real( tSection, "count", 0 );
    for ( var i = 0; i &lt; tCount; ++i ) {
        var tTag = ini_read_string( tSection, string( i ), "" );
        if ( ini_read_real( tTag, "group", false ) ) {
            //We have to go deeper
            ds_queue_enqueue( tQueue, tTag );
        } else {
            //Load in a potential segment
            {
                //Load in gene
                var tDef = ini_read_real( tTag, "default", 1 );
                var tTitle = ini_read_string( tTag, "title", tTag );
                var tHide = ini_read_real( tTag, "hidden", false );
                var tIndex = ds_grid_height( geneData );
                ds_grid_resize( geneData, Gene.Size, ( tIndex + 1 ) );
                ds_grid_set( geneData, Gene.Tag, tIndex, tTag );
                ds_grid_set( geneData, Gene.Default, tIndex, tDef );
                ds_grid_set( geneData, Gene.Title, tIndex, tTitle );
                ds_grid_set( geneData, Gene.Hidden, tIndex, tHide );
                //Add it to the current group
                if ( tGroup &gt;= 0 ) {
                    var tGroupList = ds_grid_get( groupData, GeneGroup.Items, tGroup );
                    ds_list_add( tGroupList, tIndex );
                }
            }
            {
                //Load in allele
                var tQuality = ini_read_real( tTag, "quality", 1 );
                var tOffsets = ds_map_create( );
                //Increase the base gene
                ds_map_add( tOffsets, tTag, ini_read_real( tTag, "offset", 1 ) );
                //Load in additional modifiers
                var tExtraCount = ini_read_real( tTag, "count", 0 );
                for ( var j = 0; j &lt; tExtraCount; ++j ) {
                    var tExtraTag = ini_read_string( tTag, "tag"+string(j), "" );
                    var tExtraOff = ini_read_real( tTag, "off"+string(j), 0 );
                    ds_map_add( tOffsets, tExtraTag, tExtraOff );
                }
                //Increase group value
                if ( tGroup &gt; 0 ) {
                    var tGroupVal = ds_grid_get( groupData, GeneGroup.Value, tGroup );
                    if ( tGroupVal != "" ) {
                        ds_map_add( tOffsets, tGroupVal, 1 );
                    }
                }
                var tIndex = ds_grid_height( alleleData );
                ds_grid_resize( alleleData, GeneAllele.Size, ( tIndex + 1 ) );
                ds_grid_set( alleleData, GeneAllele.Tag, tIndex, tTag );
                ds_grid_set( alleleData, GeneAllele.Values, tIndex, tOffsets );
                ds_grid_set( alleleData, GeneAllele.Quality, tIndex, tQuality );
                ds_grid_set( alleleData, GeneAllele.Group, tIndex, tGroup );
            }
        }
    }
}

ds_queue_destroy( tQueue );

ini_close( );

//Convert gene group values to indices
for ( var i = 0; i &lt; ds_grid_height( groupData ); ++i ) {
    var tValue = ds_grid_get( groupData, GeneGroup.Value, i );
    var tIndex = -1;
    if ( ds_grid_value_exists( geneData, Gene.Tag, 0,
        Gene.Tag, ( ds_grid_height( geneData ) - 1 ), tValue ) )
    {
        tIndex = ds_grid_value_y( geneData, Gene.Tag, 0,
            Gene.Tag, ( ds_grid_height( geneData ) - 1 ), tValue
        );
    }
    ds_grid_set( groupData, GeneGroup.Value, i, tIndex );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
