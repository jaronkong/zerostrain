<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

// size/scale in pixels of blur.
_size = 0.002;//2.1;//1.1
_intensity = 2.5;//1.5;

passSurface = -1;

drawQueue = ds_priority_create();

showMap = true;

blurHShader = blurH_sdr;
//uScale = shader_get_uniform(blurHShader, "uScale");
blurSizeH = shader_get_uniform(blurHShader, "inputSize");
colorMapH = shader_get_sampler_index(blurHShader, "heightMap");

blurVShader = blurV_sdr;
//uScale = shader_get_uniform(blurHShader, "uScale");
blurSizeV = shader_get_uniform(blurVShader, "inputSize");
colorMapV = shader_get_sampler_index(blurVShader, "heightMap");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up

ds_priority_destroy( drawQueue );


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw bloom sprites

surface_set_target( effects_getShaderSurface() );
d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );
draw_clear_alpha( c_black, 1 );


while ( !ds_priority_empty( drawQueue ) ) {
    
    var tCurrentObj = ds_priority_delete_min( drawQueue );

    //if ( object_is_ancestor( tCurrentObj.object_index, bloomablePar )) {
        
    //}
    /*
    if ( object_is_ancestor( tCurrentObj.object_index, physicalObject )) {
        with ( tCurrentObj ) {
            draw_sprite_ext( sprite_index, image_index, x, y, image_xscale * visScale, image_yscale * visScale, image_angle - 90, c_black, image_alpha );
        }
    }
    else {
    */
        with ( tCurrentObj ) {
            event_user( 0 );
        }
    //}
    
}

surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
// bind shader.

//d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );

var tGlobalSurface = effects_getShaderSurface();
if ( !surface_exists( passSurface ) ) {
    passSurface = surface_create( surface_get_width( tGlobalSurface ), surface_get_height( tGlobalSurface ) );
}


draw_set_blend_mode( bm_add );

shader_set(blurHShader);
surface_set_target( passSurface );
    draw_clear_alpha( c_black, 0 );
    
    shader_set_uniform_f( blurSizeH, _size );
    texture_set_stage(colorMapH, surface_get_texture( tGlobalSurface ));
    var texScreen = surface_get_texture(tGlobalSurface);
        draw_surface_stretched(tGlobalSurface, 0, 0, 
                    surface_get_width( tGlobalSurface ), 
                    surface_get_height( tGlobalSurface ));
surface_reset_target();
shader_reset();

d3d_set_projection_ortho( view_xview[0], view_yview[0], view_wview[0], view_hview[0], view_angle[0] );
shader_set(blurVShader);
    shader_set_uniform_f( blurSizeV, _size );
    texture_set_stage(colorMapV, surface_get_texture( tGlobalSurface ));
    var texScreen = surface_get_texture(tGlobalSurface);
        draw_surface_stretched(passSurface, view_xview, view_yview, 
                    view_wview, 
                    view_hview);

shader_reset();
draw_set_blend_mode( bm_normal );

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG
if ( global.debugMode &amp;&amp; showMap) {
    if ( surface_exists( effects_getShaderSurface() ) ) {
        draw_surface_stretched( effects_getShaderSurface(), view_xview + 0, view_yview + 200, 300, 250 );
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG toggle
showMap = !showMap;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
