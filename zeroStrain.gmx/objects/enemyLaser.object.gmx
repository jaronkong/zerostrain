<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite13</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>enemyWeaponPar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Specific properties

attachTarget = noone;
inheritAngle = true;

traceDelay = room_speed * 0.5;
maxTraceDelay = traceDelay;

hitForce = 10;

range = 600;
beamWidth = 64;
angle = 0;
damage = 20;

emitter1 = part_emitter_create( global.enemyWeaponSystem );
part_emitter_region( global.enemyWeaponSystem, emitter1, x, x, y, y, ps_shape_ellipse, ps_distr_gaussian );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean up

part_emitter_destroy( global.enemyWeaponSystem, emitter1 );


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lock to user

if ( instance_exists( attachTarget ) ) {
    x = attachTarget.x;
    y = attachTarget.y;
    
    if ( inheritAngle ) {
        angle = attachTarget.image_angle;
    }
}
else {
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Trace delay

traceDelay --;

if ( traceDelay &lt;= 0 ) {
    event_user( 0 );
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fire Effects
var t = global.timeTickFactor;

playSound( enemyBeam_sd, 1, false );

part_type_direction(getParticle( "enemyBeamCore" ), angle, angle, 0 *t,0 *t);
part_type_direction(getParticle( "enemyBeamShimmer" ), angle, angle, 0 *t,0 *t);

var tNumBeamLines = 5;
var tBeamLineIncrement = beamWidth / tNumBeamLines;
var tBeamHalfWidth = beamWidth / 2;

var tBeamStartX = x + lengthdir_x( tBeamHalfWidth, angle + 90 );
var tBeamStartY = y + lengthdir_y( tBeamHalfWidth, angle + 90 );

for ( var i = 0; i &lt; tNumBeamLines; ++i ) {
    var tBaseX = tBeamStartX + lengthdir_x( tBeamLineIncrement*i, angle - 90 );
    var tBaseY = tBeamStartY + lengthdir_y( tBeamLineIncrement*i, angle - 90 );
    
    //Number of particles to spawn on each beam line
    repeat( range div 15 ) {
        var tRandDist = random( range );
        part_particles_create( global.enemyWeaponSystem, 
                            tBaseX + lengthdir_x( tRandDist, angle ),
                            tBaseY + lengthdir_y( tRandDist, angle ),
                            getParticle( "enemyBeamCore" ), 1 );
        part_particles_create( global.enemyWeaponSystem, 
                            tBaseX + lengthdir_x( tRandDist, angle ),
                            tBaseY + lengthdir_y( tRandDist, angle ),
                            getParticle( "enemyBeamShimmer" ), 1 );
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for hits
var tX = 0;
var tY = 0;

with ( playerShip ) {

    tX = x;
    tY = y;

    var tDist = point_distance( other.x, other.y, tX, tY );
    var tAngle = point_direction( other.x, other.y, tX, tY );
    
    var xDist = tDist * cos( degtorad( angle_difference(other.angle, tAngle) ) );
    var yDist = tDist * sin( degtorad( abs( angle_difference(other.angle, tAngle) ) ) );
    
    if ( xDist &lt; other.range &amp;&amp; xDist &gt; 0 &amp;&amp; yDist &lt; other.beamWidth/2 ) {
        damagePlayer( id, other.damage );
        audioSetPitchRand( damageTaken_sd );
        playSound( damageTaken_sd, 1, false );
        shakeScreen( 32 );
        
        motion_add( tAngle, other.hitForce );
        //Create effects
        with ( other ) {
            part_emitter_region( global.enemyWeaponSystem, emitter1, 
                            tX - 32, tX + 32, tY - 32, tY + 32, ps_shape_ellipse, ps_distr_gaussian );
            part_type_direction(getParticle( "enemyBeamHitBurst" ), tAngle - 30, tAngle + 30, 0 *t,0 *t);
            part_type_direction(getParticle( "enemyBeamHitSparks" ), 0, 359, 0 *t,0 *t);
            part_emitter_burst( global.enemyWeaponSystem, emitter1, getParticle( "enemyBeamHitBurst" ), 30 );
            part_emitter_burst( global.enemyWeaponSystem, emitter1, getParticle( "enemyBeamHitSparks" ), 50 );
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tracer

draw_set_color( c_red );
draw_set_alpha( traceDelay / maxTraceDelay );
draw_line_width( x, y, x + lengthdir_x( range, angle ), y + lengthdir_y( range, angle ), beamWidth );

draw_set_alpha( 1 );
draw_line( x + lengthdir_x( beamWidth/2, angle - 90 ),
            y + lengthdir_y( beamWidth/2, angle - 90 ),
            x + lengthdir_x( beamWidth/2, angle - 90 ) + lengthdir_x( range, angle ),
            y + lengthdir_y( beamWidth/2, angle - 90 ) + lengthdir_y( range, angle ) );
draw_line( x + lengthdir_x( beamWidth/2, angle + 90 ),
            y + lengthdir_y( beamWidth/2, angle + 90 ),
            x + lengthdir_x( beamWidth/2, angle + 90 ) + lengthdir_x( range, angle ),
            y + lengthdir_y( beamWidth/2, angle + 90 ) + lengthdir_y( range, angle ) );
            
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
