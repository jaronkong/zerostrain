<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>bloomablePar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

attachTarget = noone;
currentStacks = 0;
maxStacks = 3;

radius = 8;
enterExtraRadius = 128;

startAngle = 90;
destroyDelay = 10;

pieceColor = c_blue;
pieceDetonateColor = c_white;
baseAlpha = 0.5;
targetBaseAlpha = 0.5;
baseAlphaTween = 0.05;

stackImage = driverStack_spr;
stackScale = 0.25;

for ( var i = 0; i &lt; maxStacks; ++i ) {
    pieceCurrentFactor[ i ] = 0;
    pieceTargetFactor[ i ] = 0;
}

pieceTweenFactor = 0.2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tween

for ( var i = 0; i &lt; maxStacks; ++i ) {
    pieceCurrentFactor[ i ] = lerp( pieceCurrentFactor[ i ], pieceTargetFactor[ i ], pieceTweenFactor );
}

baseAlpha = lerp( baseAlpha, targetBaseAlpha, baseAlphaTween );

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Break
for ( var i = 0; i &lt; maxStacks; ++i ) {
    pieceTargetFactor[ i ] = 0;
}
pieceColor = pieceDetonateColor;
targetBaseAlpha = 0;

alarm[ 0 ] = destroyDelay;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stack up

if ( currentStacks &lt; maxStacks ) {
    pieceTargetFactor[ currentStacks ] = 1;
    currentStacks ++;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if ( instance_exists( attachTarget ) ) {
    var tAngleIncrement = 360 / maxStacks;
    for ( var i = 0; i &lt; currentStacks; ++i ) {
        //if ( pieceCurrentFactor[ i ] &gt; 0 ) {
            var tRadius = radius + enterExtraRadius * (1-pieceCurrentFactor[ i ]);
            var tXPos = attachTarget.x + lengthdir_x( tRadius, startAngle + tAngleIncrement*i );
            var tYPos = attachTarget.y + lengthdir_y( tRadius, startAngle + tAngleIncrement*i );
            
            draw_sprite_ext( stackImage, 0, tXPos, tYPos, 
                            pieceCurrentFactor[ i ] * stackScale, pieceCurrentFactor[ i ] * stackScale, 
                            i * tAngleIncrement + 90, c_white, baseAlpha * pieceCurrentFactor [ i ] );
            
        //}
    }
}

/*
draw_primitive_begin( pr_trianglefan );

if ( currentStacks &gt; 0 &amp;&amp; instance_exists( attachTarget )) {
    draw_vertex_colour( attachTarget.x, attachTarget.y, pieceColor, baseAlpha );
    
    var tAngleIncrement = 360 / maxStacks;
    for ( var i = 0; i &lt; currentStacks; ++i ) {
        //if ( pieceCurrentFactor[ i ] &gt; 0 ) {
            var tRadius = radius + enterExtraRadius * (1-pieceCurrentFactor[ i ]);
            var tXPos = attachTarget.x + lengthdir_x( tRadius, startAngle + tAngleIncrement*i );
            var tYPos = attachTarget.y + lengthdir_y( tRadius, startAngle + tAngleIncrement*i );
            
            draw_vertex_colour( tXPos, tYPos, pieceColor, baseAlpha*pieceCurrentFactor[ i ] );
            
            if ( i == currentStacks - 1 ) {
                var tXPos = attachTarget.x + lengthdir_x( tRadius, startAngle + tAngleIncrement*(i+1) );
                var tYPos = attachTarget.y + lengthdir_y( tRadius, startAngle + tAngleIncrement*(i+1) );
                
                draw_vertex_colour( tXPos, tYPos, pieceColor, baseAlpha*pieceCurrentFactor[ i ] );
                
            }
        //}
    }

}

draw_primitive_end();
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

event_user( 0 );

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
