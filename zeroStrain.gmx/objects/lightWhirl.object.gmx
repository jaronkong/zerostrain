<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>lightPrimitiveEffectPar</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

resolution = 1;

color = c_white;
alpha = 1;

currentAngle = 0;
spinRate = -7;
endSpinRate = 0;
spinRateTween = 0.025;

anchor = noone;
drawOriginX = x;
drawOriginY = y;

drawRadius = 300;
endDrawRadius = 0;
drawRadiusTween = 0.1;

//Distance to the secondary origin.
rotRange = 100; //Bigger means longer and slimmer whirls.
endRotRange = 64;
rotRangeTween = 0.05;

//Draw properties
contractTween = 0.05; //Rate to collapse the thickness and length

thickness = 64;
endThickness = 0;

curveAngle = 90;
endCurveAngle = 0;

curvePercent = 0.8; //Percentage along the curve to put the hard edge

rotOriginAngleOffset = 120;

//Internal Variables
rotOriginX = 0;
rotOriginY = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TweenValues

currentAngle += spinRate;

spinRate = lerp( spinRate, endSpinRate, spinRateTween );
drawRadius = lerp( drawRadius, endDrawRadius, drawRadiusTween );
rotRange = lerp( rotRange, endRotRange, rotRangeTween );

thickness = lerp( thickness, endThickness, contractTween );
curveAngle = lerp( curveAngle, endCurveAngle, contractTween );

if ( instance_exists( anchor ) ) {
    drawOriginX = anchor.x;
    drawOriginY = anchor.y;
}

if ( curveAngle == 0 ) {
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Primitive

rotOriginX = drawOriginX + lengthdir_x( rotRange, currentAngle + rotOriginAngleOffset );
rotOriginY = drawOriginY + lengthdir_y( rotRange, currentAngle + rotOriginAngleOffset );

var tCornerPointX = drawOriginX + lengthdir_x( drawRadius, currentAngle );
var tCornerPointY = drawOriginY + lengthdir_y( drawRadius, currentAngle );
var tRotOriginAngle = point_direction( rotOriginX, rotOriginY, tCornerPointX, tCornerPointY );
var tRotOriginDist = point_distance( rotOriginX, rotOriginY, tCornerPointX, tCornerPointY );

var tCutoffAngle = curveAngle * curvePercent;
var tThicknessStep = thickness / tCutoffAngle / resolution;
var tThicknessCounter = 0;

//Make sure the cutoffAngle is larger than the resolution so we don't run into draw issues
if ( tCutoffAngle &lt; resolution ) {
    instance_destroy();
    exit;
}

//Go through and draw the crescent shape
draw_primitive_begin( pr_trianglestrip );
draw_vertex_colour( tCornerPointX, tCornerPointY, color, alpha );
for ( var i = 0; i &lt; tCutoffAngle; i+= resolution ) {
    var tAlpha = alpha * ( 1 - ( i / tCutoffAngle ) );
    var tOuterPosX = rotOriginX + lengthdir_x( 
                                        tRotOriginDist + ( tThicknessStep * tThicknessCounter ),
                                        tRotOriginAngle + i 
                                        );
    var tOuterPosY = rotOriginY + lengthdir_y( 
                                        tRotOriginDist + ( tThicknessStep * tThicknessCounter ),
                                        tRotOriginAngle + i 
                                        );    
    var tInnerPosX = rotOriginX + lengthdir_x( 
                                        tRotOriginDist,
                                        tRotOriginAngle + i 
                                        );
    var tInnerPosY = rotOriginY + lengthdir_y( 
                                        tRotOriginDist,
                                        tRotOriginAngle + i 
                                        );    
                                        
    draw_vertex_colour( tOuterPosX, tOuterPosY, color, tAlpha );
    draw_vertex_colour( tInnerPosX, tInnerPosY, color, tAlpha );                           
    tThicknessCounter ++;
}
var tFinalPosX = rotOriginX + lengthdir_x(
                                        tRotOriginDist,
                                        tRotOriginAngle + curveAngle
                                        );
var tFinalPosY = rotOriginY + lengthdir_y(
                                        tRotOriginDist,
                                        tRotOriginAngle + curveAngle
                                        );
draw_vertex_colour( tFinalPosX, tFinalPosY, color, 0 );
draw_primitive_end();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
